# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  paths:
    include:
      - worker/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c0c84076-1bb9-41d1-b3f3-8e2a8256b635'
  imageRepository: 'workerapp'
  containerRegistry: 'azdevopstest.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/worker/Dockerfile'
  tag: '$(Build.BuildId)'

pool:
  name: 'azurevm'

stages:
- stage: Build
  displayName: Build 
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build the Image
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: 'worker/Dockerfile'
        tags: '$(tag)'



      
- stage: Push
  displayName: Push
  dependsOn: Build
  jobs:
  - job: Push
    displayName: Push
    steps:
    - task: Docker@2
      displayName: Push the Image
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: '$(tag)'

- stage: Test
  displayName: Test
  dependsOn: Push
  jobs:
  - job: Test
    displayName: Test
    steps:
    - script: |
        echo "Pulling the container image..."
        docker pull $(containerRegistry)/$(imageRepository):$(tag)

        echo "Starting container..."
        docker run -d --rm --name testcontainer $(containerRegistry)/$(imageRepository):$(tag)

        echo "Waiting for app to start..."
        sleep 10

        echo "Checking if container is running..."
        if docker ps | grep -q testcontainer; then
          echo "Container is running."
        else
          echo "Container failed to start!"
          docker logs testcontainer || true
          exit 1
        fi

        echo "Stopping container..."
        docker stop testcontainer
      displayName: "Test"

- stage: Update
  displayName: Update
  dependsOn: Test
  jobs:
  - job: Update
    displayName: Update
    steps:
    # Ensure line endings are fixed (in case file was saved with CRLF)
    - script: |
        sudo apt-get update -y
        sudo apt-get install -y dos2unix
        dos2unix $(Build.SourcesDirectory)/scripts/updateK8sManifests.sh
      displayName: "Fix script line endings"

    # Run the update script with PAT passed securely
    - task: Bash@3
      displayName: "Update K8s manifests"
      inputs:
        targetType: filePath
        filePath: 'scripts/updateK8sManifests.sh'
        arguments: 'worker $(imageRepository) $(tag)'
      env:
        AZURE_PAT: $(AZURE_PAT)   # secret pipeline variable
